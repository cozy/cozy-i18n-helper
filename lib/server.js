// Generated by CoffeeScript 1.6.2
(function() {
  var LocaleManager,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LocaleManager = (function() {
    function LocaleManager() {
      this.middleware = __bind(this.middleware, this);
    }

    LocaleManager.prototype.createCozyInstanceSchema = function() {
      var CozyInstance, Schema, db, settings;

      Schema = require('jugglingdb').Schema;
      settings = {
        url: 'http://localhost:9101/'
      };
      db = new Schema('cozy-adapter', settings);
      return CozyInstance = db.define('CozyInstance', {
        locale: String
      });
    };

    LocaleManager.prototype.getLocale = function(compound, callback) {
      var CozyInstance, _ref;

      CozyInstance = compound != null ? (_ref = compound.models) != null ? _ref.CozyInstance : void 0 : void 0;
      if (CozyInstance == null) {
        CozyInstance = this.createCozyInstanceSchema();
      }
      return CozyInstance.all(function(err, instances) {
        var _ref1;

        return callback(err, (instances != null ? (_ref1 = instances[0]) != null ? _ref1.locale : void 0 : void 0) || 'en');
      });
    };

    LocaleManager.prototype.mount = function(compound) {
      var oldListeners,
        _this = this;

      oldListeners = compound.server.listeners('request').splice(0);
      compound.server.removeAllListeners('request');
      return compound.server.on('request', function(req, res) {
        var listener, _i, _len, _results;

        if (req.url === '/cozy-locale.json') {
          return _this.getLocale(compound, function(err, locale) {
            res.writeHead(200, {
              'Content-Type': 'text/json'
            });
            return res.end("{\"locale\":\"" + locale + "\"}");
          });
        } else {
          _results = [];
          for (_i = 0, _len = oldListeners.length; _i < _len; _i++) {
            listener = oldListeners[_i];
            _results.push(listener.call(compound.server, req, res));
          }
          return _results;
        }
      });
    };

    LocaleManager.prototype.middleware = function(req, res, next) {
      if (req.url !== '/cozy-locale.json') {
        return next();
      }
      return this.getLocale(null, function(err, locale) {
        if (err) {
          return res.send(err, 500);
        } else {
          return res.send({
            locale: locale
          });
        }
      });
    };

    return LocaleManager;

  })();

  module.exports = new LocaleManager;

}).call(this);
